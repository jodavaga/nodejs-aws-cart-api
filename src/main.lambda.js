"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
exports.getDbCredentials = getDbCredentials;
require("reflect-metadata");
const core_1 = require("@nestjs/core");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const app_module_1 = require("./app.module");
const serverless_express_1 = __importDefault(require("@vendia/serverless-express"));
let server;
async function bootstrapServer() {
    const app = await core_1.NestFactory.create(app_module_1.AppModule);
    app.enableCors();
    await app.init();
    const expressApp = app.getHttpAdapter().getInstance();
    return (0, serverless_express_1.default)({ app: expressApp });
}
async function getDbCredentials() {
    const client = new client_secrets_manager_1.SecretsManagerClient({});
    const arn = process.env.DB_SECRET_ARN;
    const secretData = await client.send(new client_secrets_manager_1.GetSecretValueCommand({ SecretId: arn }));
    const secret = JSON.parse(secretData.SecretString);
    return {
        username: secret.username,
        password: secret.password,
        host: process.env.DB_HOST,
        port: Number(process.env.DB_PORT || 5432),
        database: 'cartdb',
    };
}
const handler = async (event, context, callback) => {
    server = server ?? (await bootstrapServer());
    return server(event, context, callback);
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5sYW1iZGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYWluLmxhbWJkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFxQkEsNENBaUJDO0FBdENELDRCQUEwQjtBQUMxQix1Q0FBMkM7QUFDM0MsNEVBR3lDO0FBQ3pDLDZDQUF5QztBQUV6QyxvRkFBMkQ7QUFFM0QsSUFBSSxNQUFlLENBQUM7QUFFcEIsS0FBSyxVQUFVLGVBQWU7SUFDNUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxrQkFBVyxDQUFDLE1BQU0sQ0FBQyxzQkFBUyxDQUFDLENBQUM7SUFDaEQsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pCLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRWpCLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN0RCxPQUFPLElBQUEsNEJBQWlCLEVBQUMsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRU0sS0FBSyxVQUFVLGdCQUFnQjtJQUNwQyxNQUFNLE1BQU0sR0FBRyxJQUFJLDZDQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYyxDQUFDO0lBRXZDLE1BQU0sVUFBVSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FDbEMsSUFBSSw4Q0FBcUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUM3QyxDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsWUFBYSxDQUFDLENBQUM7SUFFcEQsT0FBTztRQUNMLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtRQUN6QixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7UUFDekIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTztRQUN6QixJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQztRQUN6QyxRQUFRLEVBQUUsUUFBUTtLQUNuQixDQUFDO0FBQ0osQ0FBQztBQUVNLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsS0FBVSxFQUNWLE9BQWdCLEVBQ2hCLFFBQWtCLEVBQ2xCLEVBQUU7SUFDRixNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLE9BQU8sTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBUFcsUUFBQSxPQUFPLFdBT2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcbmltcG9ydCB7IE5lc3RGYWN0b3J5IH0gZnJvbSAnQG5lc3Rqcy9jb3JlJztcbmltcG9ydCB7XG4gIFNlY3JldHNNYW5hZ2VyQ2xpZW50LFxuICBHZXRTZWNyZXRWYWx1ZUNvbW1hbmQsXG59IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zZWNyZXRzLW1hbmFnZXInO1xuaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSAnLi9hcHAubW9kdWxlJztcbmltcG9ydCB7IEhhbmRsZXIsIENvbnRleHQsIENhbGxiYWNrIH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgc2VydmVybGVzc0V4cHJlc3MgZnJvbSAnQHZlbmRpYS9zZXJ2ZXJsZXNzLWV4cHJlc3MnO1xuXG5sZXQgc2VydmVyOiBIYW5kbGVyO1xuXG5hc3luYyBmdW5jdGlvbiBib290c3RyYXBTZXJ2ZXIoKSB7XG4gIGNvbnN0IGFwcCA9IGF3YWl0IE5lc3RGYWN0b3J5LmNyZWF0ZShBcHBNb2R1bGUpO1xuICBhcHAuZW5hYmxlQ29ycygpO1xuICBhd2FpdCBhcHAuaW5pdCgpO1xuXG4gIGNvbnN0IGV4cHJlc3NBcHAgPSBhcHAuZ2V0SHR0cEFkYXB0ZXIoKS5nZXRJbnN0YW5jZSgpO1xuICByZXR1cm4gc2VydmVybGVzc0V4cHJlc3MoeyBhcHA6IGV4cHJlc3NBcHAgfSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREYkNyZWRlbnRpYWxzKCkge1xuICBjb25zdCBjbGllbnQgPSBuZXcgU2VjcmV0c01hbmFnZXJDbGllbnQoe30pO1xuICBjb25zdCBhcm4gPSBwcm9jZXNzLmVudi5EQl9TRUNSRVRfQVJOITtcblxuICBjb25zdCBzZWNyZXREYXRhID0gYXdhaXQgY2xpZW50LnNlbmQoXG4gICAgbmV3IEdldFNlY3JldFZhbHVlQ29tbWFuZCh7IFNlY3JldElkOiBhcm4gfSksXG4gICk7XG5cbiAgY29uc3Qgc2VjcmV0ID0gSlNPTi5wYXJzZShzZWNyZXREYXRhLlNlY3JldFN0cmluZyEpO1xuXG4gIHJldHVybiB7XG4gICAgdXNlcm5hbWU6IHNlY3JldC51c2VybmFtZSxcbiAgICBwYXNzd29yZDogc2VjcmV0LnBhc3N3b3JkLFxuICAgIGhvc3Q6IHByb2Nlc3MuZW52LkRCX0hPU1QsXG4gICAgcG9ydDogTnVtYmVyKHByb2Nlc3MuZW52LkRCX1BPUlQgfHwgNTQzMiksXG4gICAgZGF0YWJhc2U6ICdjYXJ0ZGInLFxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChcbiAgZXZlbnQ6IGFueSxcbiAgY29udGV4dDogQ29udGV4dCxcbiAgY2FsbGJhY2s6IENhbGxiYWNrLFxuKSA9PiB7XG4gIHNlcnZlciA9IHNlcnZlciA/PyAoYXdhaXQgYm9vdHN0cmFwU2VydmVyKCkpO1xuICByZXR1cm4gc2VydmVyKGV2ZW50LCBjb250ZXh0LCBjYWxsYmFjayk7XG59O1xuIl19